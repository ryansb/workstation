colorscheme typofree

"let jj get you out of insert mode
inoremap jj <ESC>

nnoremap ; :

" Map ; to : for great pythonic justice
autocmd FileType python inoremap ; :
autocmd FileType python inoremap : ;

let g:indent_guides_enable_on_vim_startup = 0

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" Let Y yank to end of line like C and D
nnoremap Y y$

set scrolloff=5 "Keep the cursor at least 5 lines from the top and bottom
set scrolljump=0 "Keep the cursor at least 5 lines from the top and bottom

set listchars=tab:>-,trail:-,eol:$,nbsp:%
au BufNewFile,BufRead *.md set listchars=nbsp:%,trail:-

"w!! writes the file using sudo
cmap w!! w !sudo tee % >/dev/null

" Word swapping
nmap <silent> gw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<cr><c-o><c-l>

" Character swapping
nmap <silent> gc xph

" create a new tab
map :tc :tabnew %<cr>
" close a tab
map :td :tabclose<cr>

" Bindings for code folding
nnoremap zz zO
nnoremap Zz zM
nnoremap zZ zR

"Custom filetypes for libraries
au BufNewFile,BufRead *.tac set filetype=python
au BufNewFile,BufRead *.jinja set ft=jinja ts=2 shiftwidth=2 expandtab
au BufNewFile,BufRead *.mak,*.mako set ft=mako ts=2 shiftwidth=2 expandtab
au BufNewFile,BufRead *.handlebars set ts=2 shiftwidth=2 expandtab

au BufNewFile,BufRead *.md set textwidth=79 wrap nonumber nofoldenable
au BufWritePre *.md :%s/\s\+$//e

"When writing a Latex file, automatically recompile it and then show it in
"evince
autocmd BufWritePost *.tex :!pdflatex % && evince `echo % | sed 's/\.tex/\.pdf/'` &

"""""XML stuff
"au BufNewFile,BufRead *.less set filetype=less
autocmd FileType xml,xslt,xhtml,html,less,css set ts=2 shiftwidth=2 expandtab
map <Leader>x :%!tidy -utf8 -xml -i -q -w 0<CR>
autocmd FileType yaml setlocal ts=2 shiftwidth=2 expandtab shiftround sts=2 indentkeys-=<:>

" Yank to system clipboard
map <Leader>y "+y

" engage live-save for editing blog posts w/ browser draft view
map <Leader>s :autocmd TextChanged,TextChangedI <buffer> silent write<CR>

" Rainbow Parentheses
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['red',         'firebrick3'],
    \ ]
au VimEnter * RainbowParenthesesToggle
au VimEnter * RainbowParenthesesLoadSquare
au VimEnter * RainbowParenthesesLoadBraces
"au VimEnter * RainbowParenthesesLoadRound
function! RPT()
	cal rainbow_parentheses#load(0)
	cal rainbow_parentheses#load(1)
	cal rainbow_parentheses#load(2)
	cal rainbow_parentheses#load(3)
	endfunction
nnoremap <Leader>p :call RPT()<CR>

" `gf` jumps to the filename under the cursor.  Point at an import statement
" and jump to it!
python << EOF
import os
import sys
import vim
for p in sys.path:
    if os.path.isdir(p):
        vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
EOF

" Add the virtualenv's site-packages to vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    bin_path = os.path.join(project_base_dir, 'bin')
    base_path = project_base_dir

    old_os_path = os.environ.get('PATH', '')
    os.environ['PATH'] = bin_path + os.pathsep + old_os_path
    base = os.path.dirname(project_base_dir)
    if sys.platform == 'win32':
        site_packages = os.path.join(base, 'Lib', 'site-packages')
    else:
        site_packages = os.path.join(base, 'lib', 'python%s' % sys.version[:3], 'site-packages')
    prev_sys_path = list(sys.path)
    import site
    site.addsitedir(site_packages)
    sys.real_prefix = sys.prefix
    sys.prefix = base
    # Move the added items to the front of the path:
    new_sys_path = []
    for item in list(sys.path):
        if item not in prev_sys_path:
            new_sys_path.append(item)
            sys.path.remove(item)
    sys.path[:0] = new_sys_path
EOF

" Python Mode
let g:pymode_run = 1
let g:pymode_run_key = '<leader>r'
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'
let g:pydoc = 'pydoc'
let g:pymode_rope = 0
let g:pymode_lint_checker = "pylint,pyflakes,pep8"
let g:pymode_lint_onfly = 0
let g:pymode_lint_jump = 0
let g:pymode_options_fold = 0
let g:pymode_breakpoint_key = '<leader>b'
command PmOff let g:pymode_lint_checker = ""
command PmOn let g:pymode_lint_checker = "pylint,pyflakes,pep8"

set nospell
set nocursorline
""""""Die, Error bells
set noerrorbells
set mouse -=a
set nobackup
set noswapfile
set noautowrite      " When I want to write to a file, I'll say so
set noautowriteall
set autoread         "Re-read open files when they are changed outside Vim

" GoLang linting
exe "set rtp+=" . globpath($GOPATH, "src/github.com/golang/lint/misc/vim")
" autocmd BufWritePost,FileWritePost *.go execute 'Lint' | cwindow
nnoremap <Leader>l :execute 'Lint' \| cwindow<CR>
function! s:GoVet()
    cexpr system("go vet " . shellescape(expand('%')))
    copen
endfunction
command! GoVet :call s:GoVet()
nnoremap <Leader>v :GoVet<CR>

